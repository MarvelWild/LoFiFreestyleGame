enforce strict
client respond to create_player
	вызов create_player_response
		\client\shared\lib\powlov\module\net\client.lua
			тут обрабатываеть wip single handler
			wip handleEvents
		сейчас 
error:net msg not processed:{
cmd="events_client",
events={
        [1]={
                player={
                        entity="player",
                        name="mw",
                        id=4
                },
                target="login",
                code="create_player_response",
                id=4,
                entity="Event",
                targetLogin="c1"
        }
}
}#^#		






server sends create_player_response to client:
	should happens in wip
	 error:event unprocessed:{
	player={
					entity="player",
					name="mw",
					id=2
	},
	target="login",
	code="create_player_response",
	id=2,
	entity="Event",
	targetLogin="c1"
	}
	stack traceback:
					shared/lib/powlov/deps/debug.lua:50: in function 'log'
					shared/lib/powlov/module/net/event.lua:142: in function 'doProcessEvent'
					shared/lib/powlov/module/net/event.lua:155: in function 'processEvent'
					shared/lib/powlov/module/net/event.lua:162: in function 'update'
					shared/lib/powlov/pow.lua:214: in function 'update'
					main.lua:29: in function 'update'
					[string "boot.lua"]:509: in function <[string "boot.lua"]:493>
					[C]: in function 'xpcall'
					[strin



+no id for services

server:

на обдумывание:
	некоторые обработчики нужны только в ответ на что-то.
	вешать их динамически и когда не нужны - снимать
	


	+108179  error:event unprocessed:{
	target="server",
	code="create_player",
	id=12,
	entity="Event",
	player_name="mw",
	login="c1"
	}
	stack traceback:
					shared/lib/powlov/deps/debug.lua:50: in function 'log'
					shared/lib/powlov/module/net/event.lua:141: in function 'doProcessEvent'
					shared/lib/powlov/module/net/event.lua:154: in function 'processEvent'
					shared/lib/powlov/module/net/event.lua:161: in function 'update'
					shared/lib/powlov/pow.lua:214: in function 'update'
					main.lua:22: in function 'update'
					[string "boot.lua"]:509: in function <[string "boot.lua"]:493>
					[C]: in function 'xpcall'
					[string "boot.lua"]:657: in function <[string "boot.lua"]:630>

+client: event without code




	
				+think those handlers generic way - later
			+it wont. implement single response handler on client
		+test afterLogin hit
	+on successfull login send request
	
	
	
	
	
	

	server reacts to create_player
client joins world p2

					+respond login_ok with login
				+должно заполниться после 
				+event.login=_netState.login не заполнено
				+событие без логина
			+shouldSendEventFromClient:1 t:server c:create_player targetLogin:nil result:false - it  should
			+пусть сервер и клиент это делают
		+что должно отправить событие? хранятся в pow.net.event
	+send create event  to server
		+create_player
	+create event for server
+client joins world p1


	+test receive
+client ack of login success	
+server responds to login command with 
+client connects



multipart entity (s+c+sha)

+Server start listening

	+pick net lib
		grease - picked
			pro
				known
			con
				too lowlevel, need boilerplate code/midware
					but could be good experience, no extra/unused code
					and better understanding
			
		noobhub - rejected
			pro
				noivelty
				can save time
			con
				js, not lua!
				
				
plugin architecture
	api
		game itself as api? seems fine
		or short set of methods?



visions

	event lifecycle
		process
		send
		clean


conclusions
		но у него есть таргет, что круто
	event по сути та же команда, но отправляемая в конце хода - есть время обработать их




Concept
	private
	protected
	mystery
	rethink everything, totally new iteration